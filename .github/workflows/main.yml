name: Build TemporalDenoiser (macOS 12 Compatible on macOS 13 Runner)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3

      - name: Set macOS 12 compatibility environment
        run: |
          # Force macOS 12 compatibility throughout the build
          echo "MACOSX_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV
          echo "_PYTHON_HOST_PLATFORM=macosx-12.0-x86_64" >> $GITHUB_ENV
          echo "ARCHFLAGS=-arch x86_64" >> $GITHUB_ENV
          echo "CFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "CXXFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "LDFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
          
          # Verify settings
          echo "Compatibility settings:"
          echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
          echo "_PYTHON_HOST_PLATFORM=$_PYTHON_HOST_PLATFORM"

      - name: Set up Python 3.10 (using actions/setup-python)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.13'
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"

      - name: Verify Python installation
        run: |
          echo "Python installation:"
          python3 --version
          python3 -c "import sysconfig; print(f'Platform: {sysconfig.get_platform()}')"
          python3 -c "import sys; print(f'Executable: {sys.executable}')"
          python3 -c "import sys; print(f'Version info: {sys.version_info}')"
          which python3

      - name: Install system dependencies with compatibility
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        run: |
          # Install required system libraries and build tools
          brew install libraw pkg-config
          
          # Install additional build dependencies that might help
          brew install libomp  # For potential numpy/scipy optimizations
          
          # Set up compiler flags for dependencies
          echo "LDFLAGS=-L/usr/local/opt/libraw/lib -L/usr/local/lib -mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "CFLAGS=-I/usr/local/opt/libraw/include -I/usr/local/include -mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/opt/libraw/lib/pkgconfig:/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Install Python dependencies with macOS 12 compatibility
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
          _PYTHON_HOST_PLATFORM: "macosx-12.0-x86_64"
          ARCHFLAGS: "-arch x86_64"
        run: |
          # Upgrade pip and setuptools first
          python3 -m pip install --upgrade pip setuptools wheel
          
          # Install build tools with compatibility
          python3 -m pip install --no-cache-dir \
            "setuptools<70" \
            "wheel<0.42" \
            "Cython<3.0"
          
          # CRITICAL: Install numpy first, then build everything else against it
          # This prevents binary incompatibility issues
          python3 -m pip install --no-cache-dir --force-reinstall \
            "numpy==1.24.3"
          
          # Verify numpy installation
          python3 -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
          
          # Install packages that depend on numpy, forcing rebuild against our numpy
          python3 -m pip install --no-cache-dir --force-reinstall --no-binary=scipy \
            "scipy==1.10.1"
          
          # Install opencv-python (has numpy dependency, use binary to avoid issues)
          python3 -m pip install --no-cache-dir --force-reinstall \
            "opencv-python==4.7.0.72"
          
          # Install other image processing libraries
          python3 -m pip install --no-cache-dir --force-reinstall \
            "imageio==2.28.1" \
            "tifffile>=2022.8.12,<2024"
          
          # Install GUI libraries (should not depend on numpy C API)
          python3 -m pip install --no-cache-dir --force-reinstall \
            "PySide6>=6.5.0,<6.7"
          
          # Install rawpy from source to ensure it's built against our numpy
          echo "Installing rawpy from source to ensure numpy compatibility..."
          python3 -m pip install --no-cache-dir --no-binary=rawpy --force-reinstall \
            "rawpy>=0.17.0,<0.19"
          
          # Install PyInstaller
          python3 -m pip install --no-cache-dir \
            "PyInstaller==5.13.0" \
            "macholib>=1.16,<2.0" \
            "altgraph>=0.17,<0.18"

      - name: Verify numpy compatibility and fix if needed
        run: |
          echo "=== Verifying numpy compatibility ==="
          
          # Test numpy import
          python3 -c "import numpy; print(f'NumPy version: {numpy.__version__}, dtype size: {numpy.dtype(\"float64\").itemsize * 8} bits')" || {
            echo "NumPy import failed, reinstalling..."
            python3 -m pip uninstall -y numpy
            python3 -m pip install --no-cache-dir "numpy==1.24.3"
          }
          
          # Test rawpy specifically for the numpy compatibility issue
          python3 -c "
          try:
              import rawpy
              print(f'✅ rawpy import successful: {rawpy.__version__}')
          except ValueError as e:
              if 'numpy.dtype size changed' in str(e):
                  print('❌ NumPy compatibility issue detected, rebuilding rawpy...')
                  exit(1)
              else:
                  raise
          except Exception as e:
              print(f'❌ rawpy import failed: {e}')
              exit(1)
          " || {
            echo "=== Rebuilding rawpy due to numpy incompatibility ==="
            python3 -m pip uninstall -y rawpy
            
            # Clear any cached builds
            python3 -m pip cache purge || true
            
            # Reinstall numpy to be absolutely sure
            python3 -m pip install --no-cache-dir --force-reinstall "numpy==1.24.3"
            
            # Build rawpy from source against the current numpy
            echo "Building rawpy from source against current numpy..."
            python3 -m pip install --no-cache-dir --no-binary=rawpy --force-reinstall \
              --verbose "rawpy>=0.17.0,<0.19"
          }

      - name: Verify Python library compatibility
        run: |
          echo "=== Checking Python executable and library ==="
          PYTHON_EXECUTABLE=$(python3 -c "import sys; print(sys.executable)")
          echo "Python executable: $PYTHON_EXECUTABLE"
          
          # Check if this is a system Python or GitHub Actions Python
          python3 -c "
          import sys, os, sysconfig
          print(f'Python prefix: {sys.prefix}')
          print(f'Python exec_prefix: {sys.exec_prefix}')
          print(f'Platform: {sysconfig.get_platform()}')
          "
          
          echo "=== Testing package imports ==="
          python3 -c "import PySide6; print(f'PySide6: {PySide6.__version__}')" || echo "PySide6 failed"
          python3 -c "import rawpy; print(f'rawpy: {rawpy.__version__}')" || echo "rawpy failed"
          python3 -c "import numpy; print(f'numpy: {numpy.__version__}')" || echo "numpy failed"
          python3 -c "import cv2; print(f'opencv: {cv2.__version__}')" || echo "opencv failed"
          python3 -c "import PyInstaller; print(f'PyInstaller: {PyInstaller.__version__}')" || echo "PyInstaller failed"

      - name: Test app module imports
        run: |
          python3 -c "
          try:
              from temporal_denoiser.cinemadng import CinemaDNG, available
              from temporal_denoiser.denoise import PreviewDenoiser
              print('Core modules import successfully')
              print(f'CinemaDNG available: {available()}')
          except Exception as e:
              print(f'Import test failed: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: Create compatibility runtime hook
        run: |
          # Create a custom runtime hook for compatibility
          mkdir -p runtime_hooks
          cat > runtime_hooks/pyi_rth_macos_compat.py << 'EOF'
          # Runtime hook for macOS compatibility
          import os
          import sys
          
          # Set compatibility environment at runtime
          os.environ['MACOSX_DEPLOYMENT_TARGET'] = '12.0'
          
          # Ensure proper library loading path
          bundle_dir = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
          lib_dir = os.path.join(bundle_dir, 'lib')
          if os.path.exists(lib_dir):
              if 'DYLD_LIBRARY_PATH' in os.environ:
                  os.environ['DYLD_LIBRARY_PATH'] = lib_dir + ':' + os.environ['DYLD_LIBRARY_PATH']
              else:
                  os.environ['DYLD_LIBRARY_PATH'] = lib_dir
          EOF

      - name: Build with PyInstaller (macOS 12 compatible)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
          _PYTHON_HOST_PLATFORM: "macosx-12.0-x86_64"
          ARCHFLAGS: "-arch x86_64"
        run: |
          echo "=== Building with PyInstaller for macOS 12 compatibility ==="
          
          # Build using the spec file
          python3 -m PyInstaller \
            --clean \
            --log-level INFO \
            --distpath dist \
            --workpath build \
            TemporalDenoiser.spec 2>&1 | tee build.log
          
          # Check build result
          if [ ! -f "dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser" ]; then
            echo "Build failed - executable not found"
            echo "=== Last 100 lines of build log ==="
            tail -100 build.log
            exit 1
          fi
          
          echo "Build completed successfully"
          
          # Show app bundle structure
          echo "=== App bundle structure ==="
          find dist/TemporalDenoiser.app/Contents -type f -name "*.dylib" | head -10 || echo "No .dylib files found"
          ls -la dist/TemporalDenoiser.app/Contents/MacOS/
          ls -la dist/TemporalDenoiser.app/Contents/Resources/ | head -10

      - name: Verify app bundle and patch for compatibility
        run: |
          echo "=== Verifying and patching app bundle compatibility ==="
          APP_EXECUTABLE="dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser"
          
          if [ -f "$APP_EXECUTABLE" ]; then
            echo "Checking executable compatibility:"
            otool -l "$APP_EXECUTABLE" | grep -A 3 "LC_VERSION_MIN_MACOSX\|LC_BUILD_VERSION" || echo "No explicit version constraints"
            
            echo "Library dependencies (first 10):"
            otool -L "$APP_EXECUTABLE" | head -10
            
            # Check Info.plist
            if [ -f "dist/TemporalDenoiser.app/Contents/Info.plist" ]; then
              echo "Info.plist minimum system version:"
              /usr/libexec/PlistBuddy -c "Print LSMinimumSystemVersion" "dist/TemporalDenoiser.app/Contents/Info.plist" 2>/dev/null || echo "Not set"
              
              # Ensure minimum system version is set to 12.0
              /usr/libexec/PlistBuddy -c "Set LSMinimumSystemVersion 12.0" "dist/TemporalDenoiser.app/Contents/Info.plist" 2>/dev/null || \
              /usr/libexec/PlistBuddy -c "Add LSMinimumSystemVersion string 12.0" "dist/TemporalDenoiser.app/Contents/Info.plist"
              
              echo "Updated Info.plist minimum system version:"
              /usr/libexec/PlistBuddy -c "Print LSMinimumSystemVersion" "dist/TemporalDenoiser.app/Contents/Info.plist"
            fi
          else
            echo "Executable not found!"
            exit 1
          fi

      - name: Test app bundle
        run: |
          echo "=== Testing app bundle ==="
          export MACOSX_DEPLOYMENT_TARGET=12.0
          
          # Test app launch (with timeout to prevent hanging)
          echo "Testing app launch..."
          timeout 10s dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser --version 2>&1 || \
          timeout 10s dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser --help 2>&1 || \
          echo "App test completed (may have shown GUI briefly)"

      - name: Create DMG
        run: |
          mkdir -p dist_dmg
          APP_PATH="dist/TemporalDenoiser.app"
          DMG_NAME="TemporalDenoiser-macOS12-compatible-$(date +'%Y%m%d-%H%M%S').dmg"
          
          # Add README for compatibility
          cat > dist/README_macOS_Compatibility.txt << 'EOF'
          TemporalDenoiser - macOS Compatibility Information
          
          This application was built on GitHub's macOS 13 runner with compatibility for macOS 12.7+
          
          System Requirements:
          - macOS 12.7 or later
          - Intel or Apple Silicon Mac
          
          If you experience issues on macOS 12:
          1. Ensure you have the latest macOS 12.7.x updates
          2. Try running from Terminal: /Applications/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser
          3. Check Console.app for error messages if the app doesn't start
          
          The app is self-contained and should not require additional software installation.
          
          Built with:
          - Python 3.10.13
          - PySide6 (Qt6)
          - OpenCV, NumPy, SciPy
          - rawpy for DNG processing
          EOF
          
          # Create DMG
          hdiutil create -volname "TemporalDenoiser" \
                         -srcfolder "$APP_PATH" \
                         -srcfolder dist/README_macOS_Compatibility.txt \
                         -ov -format UDZO "dist_dmg/$DMG_NAME"
          
          echo "DMG created: $DMG_NAME"
          ls -lah dist_dmg/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: TemporalDenoiser-macOS12-compatible
          path: |
            dist_dmg/*.dmg
            dist/README_macOS_Compatibility.txt
            build.log
          retention-days: 30

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-failure
          path: |
            build.log
            build/
          retention-days: 7
