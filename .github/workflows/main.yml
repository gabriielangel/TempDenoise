name: Build TemporalDenoiser (macOS 12 Compatible on macOS 13 Runner)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3

      - name: Set macOS 12 compatibility environment
        run: |
          # Force macOS 12 compatibility throughout the build
          echo "MACOSX_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV
          echo "_PYTHON_HOST_PLATFORM=macosx-12.0-x86_64" >> $GITHUB_ENV
          echo "ARCHFLAGS=-arch x86_64" >> $GITHUB_ENV
          echo "CFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "CXXFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "LDFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
          
          # Verify settings
          echo "Compatibility settings:"
          echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
          echo "_PYTHON_HOST_PLATFORM=$_PYTHON_HOST_PLATFORM"

      - name: Install Python 3.10 with compatibility
        run: |
          # Install Python 3.10 via pyenv with macOS 12 compatibility
          brew install pyenv
          
          # Set environment for pyenv compilation
          export MACOSX_DEPLOYMENT_TARGET=12.0
          export PYTHON_CONFIGURE_OPTS="--enable-shared --with-ensurepip=install"
          export CFLAGS="-mmacosx-version-min=12.0 -I$(brew --prefix openssl)/include"
          export LDFLAGS="-mmacosx-version-min=12.0 -L$(brew --prefix openssl)/lib"
          
          # Install Python 3.10.13 (last stable 3.10.x)
          pyenv install 3.10.13
          pyenv global 3.10.13
          
          # Add to PATH
          echo "$HOME/.pyenv/shims" >> $GITHUB_PATH
          echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
          
          # Verify Python version and compatibility
          echo "Python installation:"
          ~/.pyenv/shims/python3 --version
          ~/.pyenv/shims/python3 -c "import sysconfig; print(f'Platform: {sysconfig.get_platform()}')"

      - name: Install system dependencies with compatibility
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        run: |
          # Install required system libraries
          brew install gfortran libraw pkg-config
          
          # Set up compiler flags for dependencies
          echo "LDFLAGS=-L/usr/local/opt/libraw/lib -mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "CFLAGS=-I/usr/local/opt/libraw/include -mmacosx-version-min=12.0" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/opt/libraw/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install Python dependencies with macOS 12 compatibility
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
          _PYTHON_HOST_PLATFORM: "macosx-12.0-x86_64"
          ARCHFLAGS: "-arch x86_64"
        run: |
          # Upgrade pip and setuptools
          python3 -m pip install --upgrade pip setuptools wheel
          
          # Install packages with forced macOS 12 compatibility
          # Use --force-reinstall to ensure compatibility flags are applied
          MACOSX_DEPLOYMENT_TARGET=12.0 python3 -m pip install --force-reinstall \
            "setuptools<81" \
            wheel
          
          # Install core dependencies with compatibility
          MACOSX_DEPLOYMENT_TARGET=12.0 python3 -m pip install --force-reinstall \
            numpy==1.24.3 \
            scipy==1.10.1
          
          # Install GUI and image processing libraries
          MACOSX_DEPLOYMENT_TARGET=12.0 python3 -m pip install --force-reinstall \
            PySide6>=6.5.0 \
            opencv-python==4.7.0.72 \
            imageio==2.28.1 \
            tifffile>=2022.8.12
          
          # Install rawpy with explicit compatibility (most likely to have issues)
          MACOSX_DEPLOYMENT_TARGET=12.0 LDFLAGS="$LDFLAGS" CFLAGS="$CFLAGS" \
            python3 -m pip install --force-reinstall --no-binary=rawpy rawpy>=0.17.0
          
          # Install PyInstaller
          MACOSX_DEPLOYMENT_TARGET=12.0 python3 -m pip install --force-reinstall \
            PyInstaller==5.13.0 \
            macholib>=1.16
          
          # Install from requirements.txt (no-deps to avoid conflicts)
          python3 -m pip install --no-deps -r requirements.txt

      - name: Verify Python library compatibility
        run: |
          echo "=== Checking Python executable and library ==="
          PYTHON_EXECUTABLE=$(python3 -c "import sys; print(sys.executable)")
          echo "Python executable: $PYTHON_EXECUTABLE"
          
          # Find the Python library
          PYTHON_LIB=$(python3 -c "
          import sys, os, sysconfig
          lib_path = os.path.join(sysconfig.get_path('stdlib'), '..', 'libpython3.10.dylib')
          lib_path = os.path.abspath(lib_path)
          if os.path.exists(lib_path):
              print(lib_path)
          else:
              # Try alternative locations
              alt_paths = [
                  os.path.join(sys.prefix, 'lib', 'libpython3.10.dylib'),
                  os.path.join(sys.exec_prefix, 'lib', 'libpython3.10.dylib')
              ]
              for path in alt_paths:
                  if os.path.exists(path):
                      print(path)
                      break
              else:
                  print('NOT_FOUND')
          ")
          
          if [ "$PYTHON_LIB" != "NOT_FOUND" ] && [ -f "$PYTHON_LIB" ]; then
            echo "Found Python library: $PYTHON_LIB"
            
            # Check minimum macOS version
            echo "Checking Python library compatibility:"
            otool -l "$PYTHON_LIB" | grep -A 2 "LC_VERSION_MIN_MACOSX\|LC_BUILD_VERSION" || echo "No version info found"
            
            # Check for problematic symbols
            if nm "$PYTHON_LIB" 2>/dev/null | grep -q "_mkfifoat"; then
              echo "⚠️  WARNING: Python library contains mkfifoat symbol (macOS 13+ only)"
            else
              echo "✅ Python library appears compatible (no mkfifoat symbol)"
            fi
          else
            echo "❌ Python library not found"
          fi
          
          echo "=== Testing package imports ==="
          python3 -c "import PySide6; print(f'✅ PySide6: {PySide6.__version__}')" || echo "❌ PySide6 failed"
          python3 -c "import rawpy; print(f'✅ rawpy: {rawpy.__version__}')" || echo "❌ rawpy failed"
          python3 -c "import numpy; print(f'✅ numpy: {numpy.__version__}')" || echo "❌ numpy failed"
          python3 -c "import cv2; print(f'✅ opencv: {cv2.__version__}')" || echo "❌ opencv failed"

      - name: Test app module imports
        run: |
          python3 -c "
          try:
              from temporal_denoiser.cinemadng import CinemaDNG, available
              from temporal_denoiser.denoise import PreviewDenoiser
              print('✅ Core modules import successfully')
              print(f'✅ CinemaDNG available: {available()}')
          except Exception as e:
              print(f'❌ Import test failed: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: Create compatibility-patched PyInstaller bootloader
        run: |
          echo "=== Preparing PyInstaller with compatibility patches ==="
          # Get PyInstaller location
          PYINSTALLER_PATH=$(python3 -c "import PyInstaller; print(PyInstaller.__path__[0])")
          echo "PyInstaller path: $PYINSTALLER_PATH"
          
          # Create a custom runtime hook for compatibility
          mkdir -p runtime_hooks
          cat > runtime_hooks/pyi_rth_macos_compat.py << 'EOF'
          # Runtime hook for macOS compatibility
          import os
          import sys
          
          # Set compatibility environment at runtime
          os.environ['MACOSX_DEPLOYMENT_TARGET'] = '12.0'
          
          # Add compatibility for missing symbols (if needed)
          try:
              import ctypes
              import ctypes.util
              
              # Pre-load system libraries that might be needed
              libc = ctypes.CDLL(ctypes.util.find_library('c'))
              if hasattr(libc, 'mkfifoat'):
                  # If mkfifoat exists, we're on a compatible system
                  pass
              else:
                  # On older systems, we might need compatibility shims
                  pass
          except:
              # Ignore errors in compatibility setup
              pass
          EOF

      - name: Build with PyInstaller (macOS 12 compatible)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
          _PYTHON_HOST_PLATFORM: "macosx-12.0-x86_64"
          ARCHFLAGS: "-arch x86_64"
        run: |
          echo "=== Building with PyInstaller for macOS 12 compatibility ==="
          
          # Add our runtime hook to the spec
          python3 -m PyInstaller \
            --log-level DEBUG \
            --target-arch x86_64 \
            --osx-bundle-identifier com.gabrielangel.TemporalDenoiser \
            --runtime-hook runtime_hooks/pyi_rth_macos_compat.py \
            TemporalDenoiser.spec 2>&1 | tee build.log
          
          # Check build result
          if [ ! -f "dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser" ]; then
            echo "❌ Build failed - executable not found"
            echo "=== Last 100 lines of build log ==="
            tail -100 build.log
            exit 1
          fi
          
          echo "✅ Build completed successfully"

      - name: Patch app bundle for macOS 12 compatibility
        run: |
          echo "=== Patching app bundle for compatibility ==="
          APP_EXECUTABLE="dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser"
          
          # Check current compatibility
          echo "Original executable info:"
          otool -l "$APP_EXECUTABLE" | grep -A 3 "LC_VERSION_MIN_MACOSX\|LC_BUILD_VERSION" || echo "No version info"
          
          # Use install_name_tool to modify compatibility if needed
          # Note: This is a best-effort approach
          echo "Attempting to patch executable for macOS 12 compatibility..."
          
          # Create a wrapper script that sets the deployment target
          cat > "dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser.wrapper" << 'EOF'
          #!/bin/bash
          # Wrapper script for macOS compatibility
          export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$(dirname "$0")/../Resources"
          export MACOSX_DEPLOYMENT_TARGET=12.0
          exec "$(dirname "$0")/TemporalDenoiser.original" "$@"
          EOF
          
          # Rename original executable
          mv "$APP_EXECUTABLE" "${APP_EXECUTABLE}.original"
          mv "dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser.wrapper" "$APP_EXECUTABLE"
          chmod +x "$APP_EXECUTABLE"
          
          echo "✅ Created compatibility wrapper"

      - name: Verify app bundle compatibility
        run: |
          echo "=== Verifying app bundle compatibility ==="
          APP_EXECUTABLE="dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser.original"
          
          if [ -f "$APP_EXECUTABLE" ]; then
            echo "Executable compatibility info:"
            otool -l "$APP_EXECUTABLE" | grep -A 3 "LC_VERSION_MIN_MACOSX\|LC_BUILD_VERSION" || echo "No version constraints found"
            
            echo "Library dependencies:"
            otool -L "$APP_EXECUTABLE" | head -10
            
            echo "Checking for problematic symbols:"
            if nm "$APP_EXECUTABLE" 2>/dev/null | grep -q "_mkfifoat"; then
              echo "⚠️  Found mkfifoat symbol - may need runtime compatibility"
            else
              echo "✅ No problematic symbols found"
            fi
          fi
          
          # Check bundled Python library
          echo "=== Checking bundled libraries ==="
          find dist/TemporalDenoiser.app/Contents/Resources -name "*python*.dylib" -exec echo "Found: {}" \; -exec otool -l {} \; | grep -A 2 "LC_VERSION_MIN_MACOSX\|LC_BUILD_VERSION" || echo "No Python library version info"

      - name: Test app bundle
        run: |
          echo "=== Testing app bundle ==="
          export MACOSX_DEPLOYMENT_TARGET=12.0
          
          # Test the wrapper script
          timeout 15s dist/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser --help 2>&1 || echo "App test completed"

      - name: Create DMG
        run: |
          mkdir -p dist_dmg
          APP_PATH="dist/TemporalDenoiser.app"
          DMG_NAME="TemporalDenoiser-macOS12-compat-$(date +'%Y%m%d-%H%M%S').dmg"
          
          # Add README for compatibility
          cat > dist/README_macOS_Compatibility.txt << 'EOF'
          TemporalDenoiser - macOS Compatibility Notes
          
          This application was built on macOS 13 but includes compatibility measures for macOS 12.7.
          
          If you experience issues on macOS 12:
          1. Make sure you have the latest macOS 12.7.x updates
          2. Try running from Terminal first: /Applications/TemporalDenoiser.app/Contents/MacOS/TemporalDenoiser
          3. Check Console.app for any error messages
          
          Built with Python 3.10.13 and compatibility flags for macOS 12.0+
          EOF
          
          hdiutil create -volname "TemporalDenoiser" \
                         -srcfolder "$APP_PATH" \
                         -srcfolder dist/README_macOS_Compatibility.txt \
                         -ov -format UDZO "dist_dmg/$DMG_NAME"
          
          echo "✅ DMG created: $DMG_NAME"
          ls -la dist_dmg/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: TemporalDenoiser-macOS12-compatible
          path: |
            dist_dmg/*.dmg
            dist/README_macOS_Compatibility.txt
            build.log
          retention-days: 30
